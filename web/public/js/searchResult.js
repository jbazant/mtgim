// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.SearchResult = (function() {
    function SearchResult(holder, form, activityTracker) {
      this.holder = holder;
      this.form = form;
      this.activityTracker = activityTracker;
      this.resetActive = __bind(this.resetActive, this);
      this.setActive = __bind(this.setActive, this);
      this.formSubmitCallback = __bind(this.formSubmitCallback, this);
      this.expandCallback = __bind(this.expandCallback, this);
      this.fadeSpeed = 'fast';
      this.jHolder = $(this.holder);
      this.adapter = this.jHolder.attr('data-shop-id');
      this.foil = this.jHolder.attr('data-foil-id');
      this.list = this.jHolder.find('.results');
      this.loaded = false;
      this.searchInput = this.form.find('#cardname');
      this.searchText = this.searchInput.val();
      this.form.on('submit', this.formSubmitCallback);
      this.isActive = false;
      return;
    }

    SearchResult.prototype.expandCallback = function() {
      this.activityTracker.trackEvent('SearchPage', 'Display results', this.adapter + '-' + this.foil);
      if (!this.loaded) {
        this.loaded = true;
        this.list.append(this.createLiDivider('Načítám ...'));
        this.list.listview('refresh');
        $.ajax({
          url: jsParams.baseUrl + '/search/basic/format/json',
          type: 'POST',
          dataType: 'json',
          data: {
            cardname: this.searchText,
            adapter: this.adapter,
            foil: this.foil
          }
        }).done((function(_this) {
          return function(data) {
            _this.list.empty();
            if (data.success) {
              _this.list.append(_this.createLiDivider("Nalezeno " + data.total + " záznamů."));
              $.each(data.results, function(index, value) {
                return _this.list.append(_this.createLiItem(value));
              });
            } else {
              _this.activityTracker.trackEvent('SearchPage', 'Display results data error', _this.adapter + '-' + _this.foil + '-' + _this.searchText);
              _this.list.append(_this.createLiDivider("Chyba! Opakujte požadavek později."));
            }
            _this.list.listview('refresh');
            if (data.success) {
              return _this.list.trigger('resultsLoaded', _this.list);
            }
          };
        })(this)).fail((function(_this) {
          return function() {
            _this.activityTracker.trackEvent('SearchPage', 'Display results connection error', _this.adapter + '-' + _this.foil + '-' + _this.searchText);
            _this.list.empty();
            _this.list.append(_this.createLiDivider("Chyba! Opakujte požadavek později."));
            _this.list.listview('refresh');
            return _this.loaded = false;
          };
        })(this));
      }
    };

    SearchResult.prototype.createLiDivider = function(text) {
      return $('<li />', {
        'data-role': 'list-divider',
        'text': text
      });
    };

    SearchResult.prototype.createLiItem = function(item) {
      var cardActions, cardInfoLine1, cardInfoLine2, colorClass, displayedName;
      colorClass = item.amount === 0 ? 'empty' : item.amount < 4 ? 'low' : 'ok';
      displayedName = item.name + (item.quality ? ' - ' + item.quality : '');
      cardInfoLine1 = $('<p />').append($('<span />', {
        'class': 'price',
        'text': item.value + ' Kč'
      })).append($('<span />', {
        'class': 'name',
        'text': displayedName
      }));
      cardInfoLine2 = $('<p />').append($('<span />', {
        'class': 'count ' + colorClass,
        'text': item.amount + ' ks'
      })).append($('<span />', {
        'class': 'expansion',
        'text': item.expansion
      }));
      cardActions = $('<a />', {
        'href': '#cardImgPopup',
        'data-rel': 'popup',
        'data-cardname': item.name,
        'data-cardset': item.expansion,
        'alt': 'Zobrazit obrázek karty',
        'title': 'Zobrazit obrázek karty',
        'text': 'Zobrazit kartu',
        'class': 'detail-button ui-btn ui-btn-icon-notext ui-icon-info ui-mini ui-corner-all ui-btn-b'
      });
      return $('<li />').append($('<div />', {
        'class': 'cardActions'
      }).append(cardActions)).append($('<div />', {
        'class': 'cardInfo'
      }).append(cardInfoLine1).append(cardInfoLine2)).append($('<div />', {
        'class': 'clear'
      }));
    };

    SearchResult.prototype.formSubmitCallback = function(e) {
      var formSubmitBaseAction;
      this.loaded = false;
      e.preventDefault();
      formSubmitBaseAction = (function(_this) {
        return function() {
          _this.loaded = false;
          _this.list.empty();
          return _this.searchText = _this.searchInput.val();
        };
      })(this);
      if (this.isActive) {
        this.jHolder.fadeOut(this.fadeSpeed, (function(_this) {
          return function() {
            formSubmitBaseAction();
            _this.expandCallback();
            return _this.jHolder.fadeIn(_this.fadeSpeed);
          };
        })(this));
      } else {
        formSubmitBaseAction();
      }
    };

    SearchResult.prototype.setActive = function() {
      this.isActive = true;
      return this.expandCallback();
    };

    SearchResult.prototype.resetActive = function() {
      return this.isActive = false;
    };

    return SearchResult;

  })();

  window.CardDetailPopup = (function() {
    function CardDetailPopup(holder, page) {
      var onLinkClick, t;
      this.holder = holder;
      this.showCard = __bind(this.showCard, this);
      t = this;
      this.cardname = null;
      this.cardset = null;
      this.loadToken = 0;
      this.loadingTag = $('<p />', {
        'text': 'Nahrávám ...'
      });
      this.errorTag = $('<p />', {
        'text': 'Kartu nelze zobrazit'
      });
      this.holder.popup('option', 'positionTo', 'window');
      onLinkClick = function() {
        var cardname, cardset, l;
        l = $(this);
        cardname = l.data('cardname');
        cardset = l.data('cardset');
        if (cardname !== t.cardname || cardset !== t.cardset) {
          t.cardname = cardname;
          t.cardset = cardset;
          return t.showCard(cardname, cardset);
        }
      };
      page.on('resultsLoaded', (function(_this) {
        return function(e, list) {
          return $('.detail-button', list).on('click', onLinkClick);
        };
      })(this));
    }

    CardDetailPopup.prototype.showCard = function(cardname, cardset) {
      this.cardname = cardname;
      this.cardset = cardset;
      this.popupSetData(this.loadingTag);
      return $.when(this.loadCard(++this.loadToken, this.cardname, this.cardset)).then(null, (function(_this) {
        return function() {
          return _this.loadCard(_this.loadToken, _this.cardname);
        };
      })(this)).then(null, (function(_this) {
        return function() {
          return _this.popupSetData(_this.errorTag);
        };
      })(this));
    };

    CardDetailPopup.prototype.loadCard = function(token, name, set) {
      var encName, encSet, img, p, uri;
      p = new $.Deferred();
      encName = encodeURIComponent(name.replace('´', "'").split('//')[0].trim());
      if (set) {
        encSet = encodeURIComponent(set);
        uri = "setname/" + encSet + "/" + encName + ".jpg";
      } else {
        uri = "card/" + encName + ".jpg";
      }
      img = $('<img />').load((function(_this) {
        return function() {
          if (token === _this.loadToken) {
            _this.popupSetData(img);
          }
          return p.resolve();
        };
      })(this)).error((function(_this) {
        return function() {
          return p.reject();
        };
      })(this)).attr('src', 'http://mtgimage.com/' + uri);
      return p.promise();
    };

    CardDetailPopup.prototype.popupSetData = function(data) {
      var old;
      old = this.holder.children().eq(1);
      if (old) {
        old.remove();
      }
      this.holder.append(data);
      return this.holder.popup('reposition', {
        y: '20px'
      });
    };

    return CardDetailPopup;

  })();

}).call(this);

//# sourceMappingURL=searchResult.map
