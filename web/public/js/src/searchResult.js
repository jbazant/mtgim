// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.SearchResult = (function() {
    function SearchResult(holder, form, activityTracker) {
      this.holder = holder;
      this.form = form;
      this.activityTracker = activityTracker;
      this.resetActive = __bind(this.resetActive, this);
      this.setActive = __bind(this.setActive, this);
      this.formSubmitCallback = __bind(this.formSubmitCallback, this);
      this.expandCallback = __bind(this.expandCallback, this);
      this.fadeSpeed = 'fast';
      this.jHolder = $(this.holder);
      this.adapter = this.jHolder.attr('data-shop-id');
      this.foil = this.jHolder.attr('data-foil-id');
      this.list = this.jHolder.find('.results');
      this.loaded = false;
      this.searchInput = this.form.find('#cardname');
      this.searchText = this.searchInput.val();
      this.form.on('submit', this.formSubmitCallback);
      this.isActive = false;
      return;
    }

    SearchResult.prototype.expandCallback = function() {
      this.activityTracker.trackEvent('SearchPage', 'Display results', this.adapter + '-' + this.foil);
      if (!this.loaded) {
        this.loaded = true;
        this.list.append(this.createLiDivider('Načítám ...'));
        this.list.listview('refresh');
        $.ajax({
          url: jsParams.baseUrl + '/search/basic/format/json',
          type: 'POST',
          dataType: 'json',
          data: {
            cardname: this.searchText,
            adapter: this.adapter,
            foil: this.foil
          }
        }).done((function(_this) {
          return function(data) {
            _this.list.empty();
            if (data.success) {
              _this.list.append(_this.createLiDivider("Nalezeno " + data.total + " záznamů."));
              $.each(data.results, function(index, value) {
                return _this.list.append(_this.createLiItem(value));
              });
            } else {
              _this.activityTracker.trackEvent('SearchPage', 'Display results data error', _this.adapter + '-' + _this.foil + '-' + _this.searchText);
              _this.list.append(_this.createLiDivider("Chyba! Opakujte požadavek později."));
            }
            _this.list.listview('refresh');
            if (data.success) {
              return _this.list.trigger('resultsLoaded', _this.list);
            }
          };
        })(this)).fail((function(_this) {
          return function() {
            _this.activityTracker.trackEvent('SearchPage', 'Display results connection error', _this.adapter + '-' + _this.foil + '-' + _this.searchText);
            _this.list.empty();
            _this.list.append(_this.createLiDivider("Chyba! Opakujte požadavek později."));
            _this.list.listview('refresh');
            _this.loaded = false;
          };
        })(this));
      }
    };

    SearchResult.prototype.createLiDivider = function(text) {
      return $('<li />', {
        'data-role': 'list-divider',
        'text': text
      });
    };

    SearchResult.prototype.createLiItem = function(item) {
      var cardActions, cardInfoLine1, cardInfoLine2, colorClass, displayedName;
      colorClass = item.amount === 0 ? 'empty' : item.amount < 4 ? 'low' : 'ok';
      displayedName = item.name + (item.quality ? ' - ' + item.quality : '');
      cardInfoLine1 = $('<p />').append($('<span />', {
        'class': 'price',
        'text': item.value + ' Kč'
      })).append($('<span />', {
        'class': 'name',
        'text': displayedName
      }));
      cardInfoLine2 = $('<p />').append($('<span />', {
        'class': 'count ' + colorClass,
        'text': item.amount + ' ks'
      })).append($('<span />', {
        'class': 'expansion',
        'text': item.expansion
      }));
      cardActions = $('<a />', {
        'data-cardname': item.name,
        'data-cardset': item.expansion,
        'alt': 'Zobrazit obrázek karty',
        'title': 'Zobrazit obrázek karty',
        'text': 'Zobrazit kartu',
        'class': 'detail-button ui-btn ui-btn-icon-notext ui-icon-info ui-mini ui-corner-all ui-btn-b'
      });
      return $('<li />').append($('<div />', {
        'class': 'cardActions'
      }).append(cardActions)).append($('<div />', {
        'class': 'cardInfo'
      }).append(cardInfoLine1).append(cardInfoLine2)).append($('<div />', {
        'class': 'clear'
      }));
    };

    SearchResult.prototype.formSubmitCallback = function(e) {
      var formSubmitBaseAction;
      this.loaded = false;
      e.preventDefault();
      formSubmitBaseAction = (function(_this) {
        return function() {
          _this.loaded = false;
          _this.list.empty();
          _this.searchText = _this.searchInput.val();
        };
      })(this);
      if (this.isActive) {
        this.jHolder.fadeOut(this.fadeSpeed, (function(_this) {
          return function() {
            formSubmitBaseAction();
            _this.expandCallback();
            return _this.jHolder.fadeIn(_this.fadeSpeed);
          };
        })(this));
      } else {
        formSubmitBaseAction();
      }
    };

    SearchResult.prototype.setActive = function() {
      this.isActive = true;
      this.expandCallback();
    };

    SearchResult.prototype.resetActive = function() {
      this.isActive = false;
    };

    return SearchResult;

  })();

}).call(this);
